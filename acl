# -*- mode: indented-text; tab-width: 4; indent-tabs-mode: nil -*-
# Thanks to https://github.com/Exim/exim/wiki/SimpleGreylisting
# Newcomers to exim (like me) should note in particular that warn is
# often used purely for its side-effects, when log_message is not set.

# This acl is a message acl, and needs to be required from the
# acl_smtp_rcpt in order to have the $local_part and
# $local_part_prefix variables defined.  Add this to the end of the
# acl_smtp_rcpt acl, before the final accept:
# require acl = disposable_aliases
#
# Or use the CHECK_RCPT_LOCAL_ACL_FILE macro supported by Debian exim4.

# Think of this acl as an up front screening rule for incoming messages.
# If the address is known to be a disposable alias which is disabled,
# it can be rejected.
# FIXME discard is an option for rcpt acls.


disposable_aliases:
    # Firstly, accept if it was generated locally or by authenticated
    # clients.  This is how users change their configurations and
    # query the state.
    accept hosts = :
    accept authenticated = *

    # Get the prefix without any numeric count part.
    warn set acl_m_local_part_prefix = ${sg{$local_part_prefix}{[.][0-9]+$}{}}

    # Find any known alias matching the local prefix (sans count)
    warn set acl_m_known_alias = ${lookup sqlite{DISP_ALIASES_DB \
        select count(*) from aliases \
        where stem = ${quote_sqlite:$acl_m_local_part_prefix} \
        {$value}fail}

    # If the last lookup failed, log a warning and accept the message
    accept condition = ${if eq{$acl_m_local_part_prefix}{fail}{}}
        log_message = "failed to lookup alias for $local_part_prefix$local_part"

    # If this prefix is not a known alias, don't try and reject it.
    accept condition = ${if eq{$acl_m_local_part_prefix}{fail}{}}
        log_message = "failed to lookup alias for $local_part_prefix$local_part"


    # Get the number of counters for this prefix (without any number part).
    # This should be 0 or 1 (if the lookup succeeds).
    warn set acl_m_num_counters = ${lookup sqlite{DISP_ALIASES_DB \
        select count(*) from counters \
        where stem = ${quote_sqlite:$acl_m_local_part_prefix} \
        {$value}fail}

    # Warn if the lookup fails, and pretend there is no counter.
    warn condition ${if eq{$acl_m_num_counters}{fail} {1}}
        set acl_m_num_counters = 0
        log_message = "failed to lookup number of counters for $local_part_prefix$local_part"

    # If there is no counter yet, then initialiase it to the prefix's
    # counter minus one (or 0 if absent), and accept it.
    accept condition = !$acl_m_num_counters
        log_message = "first sighting of email to $local_part_prefix$local_part" 
        condition = ${lookup sqlite{DISP_ALIASES_DB \
            insert or replace into counters \
            set counter = ${if ${match}{[.]([0-9]+)$}{$1}{0}} - 1 \
            where stem = ${quote_sqlite:$acl_m_local_part_prefix} \
            {1}fail}

    # If there is no counter here, something went wrong with the last
    # step.  Losing the message because of an error would be bad, so
    # log the error and accept it.
    accept condition = !$acl_m_num_counters 
        log_message = "failed initialising sqlite database counter for $local_part_prefix$local_part"

    # If we get here the prefix (sans counts) has been seen before,
    # and has an initialised counter.  Get the value (which may be -1
    # if the counter is disabled).
    warn set acl_m_counter = ${lookup sqlite{DISP_ALIASES_DB \
        select counter from counters \
        where stem = ${quote_sqlite:$acl_m_local_part_prefix} \
        {$value}{fail}}

    # Warn if the lookup failed.
    warn condition ${if eq{$acl_m_counter}{fail} {1}}
        log_message = "failed to lookup sqlite database counter for $local_part_prefix$local_part"

    # If the counter is greater than zero, decrement the counter and
    # accept the message.
    accept condition = ${if > {$acl_m_counter}{0}}
	    condition = ${lookup sqlite{DISP_ALIASES_DB \
	        insert or replace into counters \
            set counter = counter - 1 \
	        where stem = ${quote_sqlite:$acl_m_local_part_prefix} \
	        {1}{fail}}

    # If the counter is greater then zero here, something went wrong
    # with the last step.  Log a warning and accept it.
    accept condition = ${if > {$acl_m_counter}{0}}
        log_message = "failed to decrement the counter for $local_part_prefix$local_part"

    # If we get here, and the prefix has a counter below zero,
    # it means it is disabled and we should always accept.
    accept condition = ${if < {$acl_m_counter}{0}}
        log_message = "unconditional delivery to $local_part_prefix$local_part"

    # Otherwise the counter is zero we deny it.
    deny log_message = "no more mail to $local_part_prefix$local_part allowed"


